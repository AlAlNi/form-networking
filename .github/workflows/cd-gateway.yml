name: CD - API Gateway

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - ".github/**"
  workflow_dispatch:

permissions:
  contents: read        # чтобы checkout работал
  id-token: write       # обязательно для OIDC

env:
  FOLDER_ID: b1gr0igqr38nt8rm70li
  SA_ID: ajepvcf5o5fl77h8b2cf
  GATEWAY_NAME: form-networking-gw
  FUNCTION_ID: ${{ vars.YC_GATEWAY_FUNCTION_ID || vars.YC_FUNCTION_ID || '' }}
  FUNCTION_INVOKER_SA_ID: ${{ vars.YC_FUNCTION_INVOKER_SA_ID || '' }}
  OPENAPI_TEMPLATE: infra/apigw-openapi.yaml
  OPENAPI_FILE: apigw-openapi.resolved.yaml

jobs:
  deploy-gateway:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # Если openapi лежит в другом приватном репо — вместо блока выше используй этот,
      # и добавь PAT в секрет CI_REPO_TOKEN (scope: repo):
      # - name: Checkout external repo
      #   uses: actions/checkout@v4
      #   with:
      #     repository: AlAlNi/form-networking
      #     ref: main
      #     token: ${{ secrets.CI_REPO_TOKEN }}
      #     fetch-depth: 1

      - name: Verify configuration
        run: |
          set -euo pipefail
          echo "Folder: $FOLDER_ID"
          echo "SA:     $SA_ID"
          echo "Template: $OPENAPI_TEMPLATE"
          if [[ -z "$FUNCTION_ID" ]]; then
            echo "FUNCTION_ID is not configured. Set repository variable YC_GATEWAY_FUNCTION_ID or YC_FUNCTION_ID with the Cloud Function ID." >&2
            exit 1
          fi
          echo "Function ID: $FUNCTION_ID"
          if [[ -n "$FUNCTION_INVOKER_SA_ID" ]]; then
            echo "Invoker SA: $FUNCTION_INVOKER_SA_ID"
          fi

      - name: Render API Gateway specification
        run: |
          set -euo pipefail
          cmd=(node infra/render-apigw.mjs "$OPENAPI_TEMPLATE" "$OPENAPI_FILE" --function-id "$FUNCTION_ID")
          if [[ -n "$FUNCTION_INVOKER_SA_ID" ]]; then
            cmd+=(--service-account-id "$FUNCTION_INVOKER_SA_ID")
          fi
          echo "Rendering API Gateway specification: ${cmd[*]}"
          "${cmd[@]}"

      - name: Sanity check
        run: |
          set -euo pipefail
          echo "Resolved OpenAPI location: $OPENAPI_FILE"
          ls -la "$(dirname "$OPENAPI_FILE")"
          test -f "$OPENAPI_FILE" || { echo "OpenAPI not found at $OPENAPI_FILE"; exit 1; }

      - name: Deploy API Gateway
        uses: yc-actions/yc-api-gateway-deploy@v3.0.0
        with:
          yc-sa-id: ${{ env.SA_ID }}
          folder-id: ${{ env.FOLDER_ID }}
          gateway-name: ${{ env.GATEWAY_NAME }}
          spec-file: ${{ env.OPENAPI_FILE }}

      - name: Done
        run: echo "API Gateway $GATEWAY_NAME deployed"
