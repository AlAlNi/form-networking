name: Deploy to Yandex Cloud

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      YC_FOLDER_ID: ${{ secrets.YC_FOLDER_ID }}
      YC_CLOUD_ID:  ${{ secrets.YC_CLOUD_ID }}
      WEB_BUCKET:   ${{ secrets.WEB_BUCKET }}
      S3_ENDPOINT:  ${{ secrets.S3_ENDPOINT }}
      BOT_TOKEN:    ${{ secrets.BOT_TOKEN }}
      APIGW_NAME:   ${{ secrets.APIGW_NAME }}
      FN_NAME:      form-networking-fn

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---------- Backend pack ----------
      - name: Install server deps
        working-directory: server
        run: npm ci

      - name: Zip server
        run: |
          cd server
          zip -r ../server.zip .

      # ---------- Install yc properly ----------
      - name: Install yc CLI
        uses: yc-actions/yc-install@v1
        with:
          version: "0.166.0"   # актуальная

      - name: Auth yc
        env:
          YC_SA_JSON: ${{ secrets.YC_SA_JSON }}
        run: |
          echo "$YC_SA_JSON" > key.json
          yc config set service-account-key key.json
          yc config set folder-id "$YC_FOLDER_ID"
          yc config set cloud-id  "$YC_CLOUD_ID"

      # ---------- Ensure function exists ----------
      - name: Ensure function
        id: fn
        shell: bash
        run: |
          set -euo pipefail
          if yc serverless function get --name "$FN_NAME" >/dev/null 2>&1; then
            echo "exists=1" >> $GITHUB_OUTPUT
          else
            yc serverless function create --name "$FN_NAME"
            echo "exists=0" >> $GITHUB_OUTPUT
          fi
          FN_ID="$(yc serverless function get --name "$FN_NAME" --format json | jq -r .id)"
          echo "id=$FN_ID" >> $GITHUB_OUTPUT

      - name: Deploy function version
        run: |
          yc serverless function version create \
            --function-id  "${{ steps.fn.outputs.id }}" \
            --runtime nodejs18 \
            --entrypoint index.handler \
            --memory 128m \
            --execution-timeout 5s \
            --environment BOT_TOKEN=${BOT_TOKEN},DEMO=1 \
            --source-path server.zip

      # ---------- API Gateway ----------
      - name: Prepare OpenAPI
        run: |
          cp infra/apigw-openapi.yaml apigw.yaml
          sed -i -e "s|\${FUNCTION_ID}|${{ steps.fn.outputs.id }}|g" apigw.yaml

      - name: Create/Update API Gateway
        id: gw
        run: |
          set -euo pipefail
          if yc serverless api-gateway get --name "$APIGW_NAME" >/dev/null 2>&1; then
            yc serverless api-gateway update --name "$APIGW_NAME" --spec=apigw.yaml
          else
            yc serverless api-gateway create --name "$APIGW_NAME" --spec=apigw.yaml
          fi
          GW_DOMAIN="$(yc serverless api-gateway get --name "$APIGW_NAME" --format json | jq -r .domain)"
          echo "url=https://${GW_DOMAIN}" >> $GITHUB_OUTPUT

      # ---------- Frontend: inject API URL & upload ----------
      - name: Inject API base URL into web/app.js
        run: |
          test -f web/app.js || (echo "file web/app.js not found" && exit 1)
          grep -q "%%API_BASE%%" web/app.js || (echo "Add %%API_BASE%% placeholder to web/app.js" && exit 1)
          sed -i -e "s|%%API_BASE%%|${{ steps.gw.outputs.url }}|g" web/app.js

      - name: Install AWS CLI
        run: |
          pip install --upgrade --user awscli
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure AWS creds (Yandex S3)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.S3_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.S3_SECRET_ACCESS_KEY }}
          aws-region: 'ru-central1'

      - name: Upload web to Object Storage
        run: |
          aws --endpoint-url "${S3_ENDPOINT}" s3 sync ./web "s3://${WEB_BUCKET}" --delete

      - name: Print URLs
        run: |
          echo "Frontend: https://storage.yandexcloud.net/${WEB_BUCKET}/index.html"
          echo "API Base:  ${{ steps.gw.outputs.url }}"
