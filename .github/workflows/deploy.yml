name: Deploy to Yandex Cloud (self-hosted runner)

on:
  push:
    branches: [ main ]

jobs:
  # 0) Проверяем критичные секреты (без требования PAT — т.к. есть фоллбэк)
  preflight:
    runs-on: ubuntu-latest
    steps:
      - name: Check required secrets
        env:
          CHECK_YC_SA_JSON_CREDENTIALS: ${{ secrets.YC_SA_JSON_CREDENTIALS }}
          CHECK_YC_FOLDER_ID:           ${{ secrets.YC_FOLDER_ID }}
          CHECK_YC_CLOUD_ID:            ${{ secrets.YC_CLOUD_ID }}
          CHECK_SUBNET_ID:              ${{ secrets.SUBNET_ID }}
          CHECK_IMAGE_ID:               ${{ secrets.IMAGE_ID }}
          CHECK_APIGW_NAME:             ${{ secrets.APIGW_NAME }}
          CHECK_WEB_BUCKET:             ${{ secrets.WEB_BUCKET }}
          CHECK_S3_ENDPOINT:            ${{ secrets.S3_ENDPOINT }}
          CHECK_S3_ACCESS_KEY_ID:       ${{ secrets.S3_ACCESS_KEY_ID }}
          CHECK_S3_SECRET_ACCESS_KEY:   ${{ secrets.S3_SECRET_ACCESS_KEY }}
        shell: bash
        run: |
          set -e
          need(){ [ -n "${!1}" ] && [ "${!1}" != "null" ] || { echo "❌ Missing secret: $1"; exit 1; }; }
          for v in CHECK_YC_SA_JSON_CREDENTIALS CHECK_YC_FOLDER_ID CHECK_YC_CLOUD_ID CHECK_SUBNET_ID CHECK_IMAGE_ID CHECK_APIGW_NAME CHECK_WEB_BUCKET CHECK_S3_ENDPOINT CHECK_S3_ACCESS_KEY_ID CHECK_S3_SECRET_ACCESS_KEY; do
            need "$v"
          done
          echo "✅ All required secrets are set"

  # 1) Поднимаем временный раннер в ЯО
  start-runner:
    name: Start YC runner
    needs: preflight
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start.outputs.label }}
      instance-id: ${{ steps.start.outputs.instance-id }}
    steps:
      - name: Prepare GitHub token (PAT -> builtin fallback)
        shell: bash
        env:
          GH_PAT:     ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          GH_BUILTIN: ${{ github.token }}
        run: |
          TOK="${GH_PAT:-$GH_BUILTIN}"
          echo "GH_TOKEN_INPUT=$TOK" >> "$GITHUB_ENV"
          if [ -n "$GH_PAT" ]; then echo "Using PAT"; else echo "Using built-in GITHUB_TOKEN"; fi

      - name: Start runner VM in YC
        id: start
        uses: yc-actions/yc-github-runner@v2
        with:
          mode: start
          github-token:               ${{ env.GH_TOKEN_INPUT }}           # <-- Больше не пустой
          yc-sa-json-credentials:     ${{ secrets.YC_SA_JSON_CREDENTIALS }}
          folder-id:                  ${{ secrets.YC_FOLDER_ID }}
          subnet-id:                  ${{ secrets.SUBNET_ID }}
          image-id:                   ${{ secrets.IMAGE_ID }}              # ubuntu LTS (standard-images)
          cores: 2
          memory: 4GB
          core-fraction: 100
          ttl: PT2H

  # 2) Деплой на поднятом раннере
  deploy:
    name: Deploy backend+gateway+frontend
    needs: start-runner
    runs-on: ${{ needs.start-runner.outputs.label }}
    timeout-minutes: 20

    env:
      YC_FOLDER_ID: ${{ secrets.YC_FOLDER_ID }}
      YC_CLOUD_ID:  ${{ secrets.YC_CLOUD_ID }}
      APIGW_NAME:   ${{ secrets.APIGW_NAME }}
      WEB_BUCKET:   ${{ secrets.WEB_BUCKET }}
      S3_ENDPOINT:  ${{ secrets.S3_ENDPOINT }}
      BOT_TOKEN:    ${{ secrets.BOT_TOKEN }}
      NO_PROXY: api.cloud.yandex.net,.yandexcloud.net
      HTTPS_PROXY: ""
      HTTP_PROXY: ""

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install basics
        run: sudo apt-get update && sudo apt-get install -y jq zip curl netcat-openbsd

      - name: Install YC CLI
        run: |
          curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh \
            | bash -s -- -i "$HOME/yandex-cloud" -n
          echo "$HOME/yandex-cloud/bin" >> $GITHUB_PATH
          yc --version

      - name: Auth YC (raw JSON secret)
        env:
          YC_SA_JSON_CREDENTIALS: ${{ secrets.YC_SA_JSON_CREDENTIALS }}
        run: |
          echo "$YC_SA_JSON_CREDENTIALS" > key.json
          yc config set service-account-key key.json
          yc config set cloud-id  "$YC_CLOUD_ID"
          yc config set folder-id "$YC_FOLDER_ID"
          yc config set endpoint  api.cloud.yandex.net

      # ---------- Backend: Cloud Function ----------
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install server deps
        working-directory: server
        run: npm ci

      - name: Zip server
        run: (cd server && zip -r ../server.zip .)

      - name: Ensure function exists
        id: fn
        run: |
          set -e
          FN_NAME="form-networking-fn"
          yc serverless function get --name "$FN_NAME" --folder-id "$YC_FOLDER_ID" >/dev/null 2>&1 \
            || yc serverless function create --name "$FN_NAME" --folder-id "$YC_FOLDER_ID"
          FN_ID=$(yc serverless function get --name "$FN_NAME" --folder-id "$YC_FOLDER_ID" --format json | jq -r .id)
          echo "id=$FN_ID" >> "$GITHUB_OUTPUT"

      - name: Deploy function version
        run: |
          yc serverless function version create \
            --function-id  "${{ steps.fn.outputs.id }}" \
            --runtime nodejs18 \
            --entrypoint index.handler \
            --memory 128m \
            --execution-timeout 5s \
            --environment BOT_TOKEN="${BOT_TOKEN}",DEMO=1 \
            --source-path server.zip

      - name: Wait function ACTIVE
        run: |
          for i in {1..40}; do
            st=$(yc serverless function version list \
              --function-id "${{ steps.fn.outputs.id }}" \
              --folder-id "$YC_FOLDER_ID" --format json | jq -r '.[-1].status')
            [ "$st" = "ACTIVE" ] && exit 0
            sleep 3
          done
          echo "Function version not ACTIVE"; exit 1

      # ---------- API Gateway ----------
      - name: Prepare OpenAPI with function id
        run: |
          cp infra/apigw-openapi.yaml apigw.yaml
          sed -i "s|\${FUNCTION_ID}|${{ steps.fn.outputs.id }}|g" apigw.yaml
          echo "== apigw.yaml ==" && cat apigw.yaml

      - name: Resolve SA_ID (runtime for gateway)
        id: sa
        run: |
          SA_ID=$(yc iam service-account get --name form-networking-sa --format json | jq -r '.id')
          echo "id=$SA_ID" >> "$GITHUB_OUTPUT"

      - name: Create/Update API Gateway (idempotent)
        id: gw
        run: |
          set -e
          if yc serverless api-gateway get --name "$APIGW_NAME" --folder-id "$YC_FOLDER_ID" >/dev/null 2>&1; then
            yc serverless api-gateway update \
              --name "$APIGW_NAME" \
              --folder-id "$YC_FOLDER_ID" \
              --service-account-id "${{ steps.sa.outputs.id }}" \
              --spec=apigw.yaml
          else
            yc serverless api-gateway create \
              --name "$APIGW_NAME" \
              --folder-id "$YC_FOLDER_ID" \
              --service-account-id "${{ steps.sa.outputs.id }}" \
              --spec=apigw.yaml
          fi
          GW_URL=$(yc serverless api-gateway get --name "$APIGW_NAME" --folder-id "$YC_FOLDER_ID" --format json | jq -r .domain)
          echo "url=https://${GW_URL}" >> "$GITHUB_OUTPUT"
          echo "API GW: https://${GW_URL}"

      # ---------- Frontend ----------
      - name: Inject API base URL into web/app.js
        run: |
          API_BASE="${{ steps.gw.outputs.url }}"
          sed -i "s|%%API_BASE%%|$API_BASE|g" web/app.js
          echo "API_BASE set to $API_BASE"

      - name: Install AWS CLI
        run: |
          pip install --upgrade --user awscli
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Upload web to Object Storage
        env:
          AWS_ACCESS_KEY_ID:     ${{ secrets.S3_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_ACCESS_KEY }}
        run: |
          aws --endpoint-url "${S3_ENDPOINT}" s3 sync ./web "s3://${WEB_BUCKET}" --delete
          echo "Frontend URL: https://storage.yandexcloud.net/${WEB_BUCKET}/index.html"

      - name: Summary
        run: |
          echo "✅ API Base URL : ${{ steps.gw.outputs.url }}"
          echo "✅ Frontend URL : https://storage.yandexcloud.net/${WEB_BUCKET}/index.html"

  # 3) Гасим раннер при любом исходе
  stop-runner:
    name: Stop YC runner
    needs: [start-runner, deploy]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - name: Prepare GitHub token (PAT -> builtin fallback)
        shell: bash
        env:
          GH_PAT:     ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          GH_BUILTIN: ${{ github.token }}
        run: |
          TOK="${GH_PAT:-$GH_BUILTIN}"
          echo "GH_TOKEN_INPUT=$TOK" >> "$GITHUB_ENV"
          if [ -n "$GH_PAT" ]; then echo "Using PAT"; else echo "Using built-in GITHUB_TOKEN"; fi

      - name: Stop runner VM
        uses: yc-actions/yc-github-runner@v2
        with:
          mode: stop
          github-token:               ${{ env.GH_TOKEN_INPUT }}           # <-- теперь точно есть
          yc-sa-json-credentials:     ${{ secrets.YC_SA_JSON_CREDENTIALS }}
          label:       ${{ needs.start-runner.outputs.label }}
          instance-id: ${{ needs.start-runner.outputs.instance-id }}
