name: CD Deploy

permissions:
  contents: read
  id-token: write

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'docs/**'
      - 'README.md'
  release:
    types:
      - published
  workflow_dispatch:

env:
  YC_FOLDER_ID: ${{ vars.YC_FOLDER_ID }}
  YC_SA_ID: ${{ vars.YC_SA_ID_PROD || vars.YC_SA_ID_SHARED }}
  FUNCTION_NAME: ${{ vars.YC_FUNCTION_NAME_PROD || 'form-networking' }}
  FUNCTION_RUNTIME: ${{ vars.YC_FUNCTION_RUNTIME || 'nodejs22' }}
  FUNCTION_ENTRYPOINT: ${{ vars.YC_FUNCTION_ENTRYPOINT || 'index.handler' }}
  FUNCTION_MEMORY: ${{ vars.YC_FUNCTION_MEMORY_PROD || '256Mb' }}
  FUNCTION_SOURCEROOT: ${{ vars.YC_FUNCTION_SOURCEROOT || 'server/' }}
  YC_API_GATEWAY_NAME: ${{ vars.YC_API_GATEWAY_NAME || 'form-networking-gw' }}
  STATIC_BUCKET: ${{ vars.YC_STATIC_BUCKET || '' }}
  FUNCTION_INVOKER_SA_ID: ${{ vars.YC_FUNCTION_INVOKER_SA_ID || '' }}

defaults:
  run:
    shell: bash

concurrency:
  group: production-${{ github.ref }}
  cancel-in-progress: false

jobs:
  deploy:
    name: Deploy production stack
    runs-on: ubuntu-latest
    environment: production
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate configuration
        run: |
          set -euo pipefail
          missing=()
          [[ -n "${YC_FOLDER_ID:-}" ]] || missing+=("YC_FOLDER_ID")
          [[ -n "${YC_SA_ID:-}" ]] || missing+=("YC_SA_ID_PROD or YC_SA_ID_SHARED")
          [[ -n "${FUNCTION_NAME:-}" ]] || missing+=("YC_FUNCTION_NAME_PROD")
          [[ -n "${YC_API_GATEWAY_NAME:-}" ]] || missing+=("YC_API_GATEWAY_NAME")
          if (( ${#missing[@]} )); then
            echo "::error::Missing required variables: ${missing[*]}"
            exit 1
          fi

      - name: Deploy Cloud Function
        id: sls-func
        uses: yc-actions/yc-sls-function@v3.1.0
        with:
          yc-sa-id: ${{ env.YC_SA_ID }}
          folder-id: ${{ env.YC_FOLDER_ID }}
          function-name: ${{ env.FUNCTION_NAME }}
          runtime: ${{ env.FUNCTION_RUNTIME }}
          memory: ${{ env.FUNCTION_MEMORY }}
          entrypoint: ${{ env.FUNCTION_ENTRYPOINT }}
          source-root: ${{ env.FUNCTION_SOURCEROOT }}
          include: |
            **/*.json
            **/*.js
            **/*.html
            **/*.css

      - name: Render API Gateway specification
        env:
          FUNCTION_ID: ${{ steps.sls-func.outputs.function-id }}
          FUNCTION_INVOKER_SA_ID: ${{ env.FUNCTION_INVOKER_SA_ID }}
        run: |
          set -euo pipefail
          extra=()
          if [[ -n "${FUNCTION_INVOKER_SA_ID}" ]]; then
            extra+=(--service-account-id "${FUNCTION_INVOKER_SA_ID}")
          fi
          node infra/render-apigw.mjs infra/apigw-openapi.yaml apigw-openapi.resolved.yaml \
            --function-id "${FUNCTION_ID}" "${extra[@]}"

      - name: Debug SA selection
        run: |
          set -euo pipefail
          echo "Using YC_SA_ID=${YC_SA_ID}"
          echo "FUNCTION_INVOKER_SA_ID=${FUNCTION_INVOKER_SA_ID}"

      - name: Deploy API Gateway
        id: deploy-gateway
        uses: yc-actions/yc-api-gateway-deploy@v3.0.0
        with:
          yc-sa-id: ${{ env.YC_SA_ID }}
          folder-id: ${{ env.YC_FOLDER_ID }}
          gateway-name: ${{ env.YC_API_GATEWAY_NAME }}
          spec-file: apigw-openapi.resolved.yaml

      - name: Dump YC CLI logs
        if: ${{ failure() }}
        run: |
          set -euo pipefail
          log_dir="${HOME}/.config/yandex-cloud/logs"
          if [[ ! -d "${log_dir}" ]]; then
            echo "YC CLI log directory not found at ${log_dir}"
            exit 0
          fi
          find "${log_dir}" -type f -name 'yc-*' -print -exec cat {} \;

      - name: Prepare static client assets
        if: ${{ env.STATIC_BUCKET != '' }}
        env:
          API_DOMAIN: ${{ steps.deploy-gateway.outputs.domain }}
        run: |
          set -euo pipefail
          workdir="dist/static"
          rm -rf "${workdir}"
          mkdir -p "${workdir}"
          cp -R server/public/. "${workdir}/"
          api_base=""
          if [[ -n "${API_DOMAIN}" ]]; then
            api_base="https://${API_DOMAIN}"
          fi
          export WORKDIR="${workdir}"
          export API_BASE="${api_base}"
          node -e "const fs=require('fs');const path=require('path');const workdir=process.env.WORKDIR;const apiBase=(process.env.API_BASE||'').trim();if(!workdir){process.exit(0);}const indexPath=path.join(workdir,'index.html');let html=fs.readFileSync(indexPath,'utf8');html=html.replace(/%%API_BASE%%/g,apiBase);fs.writeFileSync(indexPath,html);"

      - name: Upload static client to Object Storage
        if: ${{ env.STATIC_BUCKET != '' }}
        uses: yc-actions/yc-obj-storage-upload@v3.0.0
        with:
          yc-sa-id: ${{ env.YC_SA_ID }}
          bucket: ${{ env.STATIC_BUCKET }}
          root: dist/static
          cache-control: |
            *.html: no-cache, no-store, must-revalidate
            *.js, *.css: public, max-age=31536000, immutable

      - name: Publish deployment summary
        run: |
          {
            echo "### Production deployment"
            echo ""
            echo "- Function ID: \`${{ steps.sls-func.outputs.function-id || 'n/a' }}\`"
            echo "- API Gateway: \`${YC_API_GATEWAY_NAME}\`"
            echo "- Gateway domain: ${{ steps.deploy-gateway.outputs.domain || 'n/a' }}"
            if [[ -n "${STATIC_BUCKET}" ]]; then
              echo "- Static bucket: \`${STATIC_BUCKET}\`"
            fi
          } >> "$GITHUB_STEP_SUMMARY"
